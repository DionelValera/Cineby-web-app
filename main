const { app, BrowserWindow } = require('electron');
const path = require('path');

const CINEBY_URL = 'https://www.cineby.app/';
const ALLOWED_DOMAIN = 'cineby.app';

function createWindow() {
    const mainWindow = new BrowserWindow({
        width: 1200,
        height: 800,
        title: "Cineby",
        webPreferences: {
            nodeIntegration: false,
            contextIsolation: true, // Seguridad obligatoria
            preload: path.join(__dirname, 'preload.js')
        }
    });

    mainWindow.loadURL(CINEBY_URL);
    
    // Bloquea todas las ventanas emergentes (popups)
    mainWindow.webContents.setWindowOpenHandler(() => {
        return { action: 'deny' }; 
    });

    // Bloquea la navegaci贸n a URLs que no sean cineby.app
    mainWindow.webContents.on('will-navigate', (event, url) => {
        try {
            const urlObj = new URL(url);
            if (urlObj.hostname !== ALLOWED_DOMAIN && !url.startsWith('file://')) {
                event.preventDefault(); // Detiene la navegaci贸n
                console.log(`[BLOQUEADO] Navegaci贸n externa: ${url}`);
            }
        } catch (e) {
            event.preventDefault();
        }
    });

    // Bloquea intentos de navegaci贸n externa disparados como "new-window"
    mainWindow.webContents.on('new-window', (event, navigationUrl) => {
        const urlObj = new URL(navigationUrl);
        if (urlObj.hostname !== ALLOWED_DOMAIN) {
            event.preventDefault();
            console.log(`[BLOQUEADO] Intento externo (new-window): ${navigationUrl}`);
        }
    });
}

app.whenReady().then(createWindow);

app.on('window-all-closed', () => {
    if (process.platform !== 'darwin') app.quit();
});

app.on('activate', () => {
    if (BrowserWindow.getAllWindows().length === 0) createWindow();
});

eof